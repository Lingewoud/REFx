/************************************************************ * Based on ExportItemsAsPngs.jsfl by C.Wilson - abitofcode * ************************************************************/var ExportFile = {	config 			: '',	doc				: '',		init : function(config)	{		this.config 		= config;		this.doc			= fl.getDocumentDOM();				ExportProfile.init(config);	},		exportPNGArray : function(fileArray)	{		for (idx in fileArray) {        	var currentItem = fileArray[idx];		        	this.exportItemAsPng(currentItem);    	}	},		exportItemAsPng : function(item) {            	this.doc.library.selectItem(item.name, true);        	// gets an array of all currently selected items in the library.   		var selectedItems = this.doc.library.getSelectedItems();        	// Add the current library item to the stage    	this.doc.library.addItemToDocument({x:0, y:0});    	// array of selected items in the document    	var w = this.doc.selection[0].width;    	var h = this.doc.selection[0].height;    	// create a publishing profile for this output with the filename, width and height set   		// createProfile(item.linkageIdentifier, w, h, saveDir);   		ExportProfile.createProfile(item.name, w, h);    	// cuts the current selection from the document and writes it to the Clipboard.    	this.doc.clipCut();    	// Create a new temporary document to paste the clip held in the clipboard     	fl.createDocument();                	// get a handle on the currently focused document (the temporary one)    	exportdoc = fl.getDocumentDOM();        	// Setup the document to use the profile we generated for it useing     	// the template    	exportdoc.importPublishProfile(config.profileFilePath);            	exportdoc.currentPublishProfile = "png";        	// pastes the contents of the Clipboard into the document, defaults to     	// adding it at the center of the document        	exportdoc.clipPaste();        	// Selects all items on the Stage    	exportdoc.selectAll();        	// We are only adding one item to each document so we only need to get the     	// first item in the array of selected items    	var selectedItem = exportdoc.selection[0];        	// set the dimensions of the output movie to match the dimensions of our selected clip    	exportdoc.width = Math.floor(w);    	exportdoc.height = Math.floor(h);        	// Move the selection to fit the dimensions of the export movie.     	exportdoc.moveSelectionBy({x:-selectedItem.left, y:-selectedItem.top});        	// Deselect the selected item    	exportdoc.selectNone();            	// Publish the current document using the png profile we set up earlier    	exportdoc.publish(); 		//this.doc.exportPNG(config.outputFilePath.substring(7) + item.name + '.png', true, true )        	// access the document that is currently focused (the temporary one) and    	// close it. Do not promt the user to save changes    	exportdoc.close(false);                	// trace its name in the output panel    	Logger.log('saving:' + config.outputFilePath + item.name);	},		exportFrameAsPNG : function (  item, altName ) {				var fileName = ( altName != undefined && altName != '') ? altName : item.name;				ExportProfile.createProfile(fileName, this.doc.width, this.doc.height);		this.doc.getTimeline().currentFrame = item.startFrame;				this.doc.importPublishProfile(config.profileFilePath);            	this.doc.currentPublishProfile = "png";		this.doc.exportPNG(config.outputFilePath.substring(7) + fileName + '.png', true, true );				//this.doc.publish(); 		    	Logger.log('saving: ' + this.config.outputFilePath + fileName + '.png');	},		exportFrameAsJPG : function (  item, altName ) {				var fileName = ( altName != undefined ) ? altName : item.name;				ExportProfile.createProfile(fileName, this.doc.width, this.doc.height, 'JPG');		this.doc.getTimeline().currentFrame = item.startFrame;				this.doc.importPublishProfile(config.profileFilePath);            	this.doc.currentPublishProfile = "jpg";		this.doc.publish(); 		    	Logger.log('saving:' + this.config.outputFilePath + fileName + '.jpg');	},		publishAsGIF : function (  fileName, gifDoc ) {		ExportProfile.createProfile(fileName, this.doc.width, this.doc.height, 'GIF');				gifDoc.importPublishProfile( config.profileFilePath );      	gifDoc.currentPublishProfile = "gif";		gifDoc.publish();		    	Logger.log('Exporting GIF: ' + this.config.outputFilePath + fileName + '.gif');	}}